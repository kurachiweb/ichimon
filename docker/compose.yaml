services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: dev # Dockerfileの"FROM ** as dev"部分を利用
    tty: true # コンテナを立ち上げたら起動させ続ける
    ports:
      - "55001:55001"
      - "24678:24678" # Viteの無限リロード対策
    networks:
      - external
      - internal
    volumes:
      - type: volume # コンテナ内の"/usr/src/app"をichimon-frontendボリュームで管理
        source: frontend
        target: /usr/src/app
      - type: volume # コンテナ内のnode_modulesを保持し、npm installを効率化
        source: frontend-module
        target: /usr/src/app/node_modules
      - type: bind # コンテナ内の"/usr/src/app"とローカルの"../frontend"を同期
        source: ../frontend
        target: /usr/src/app
  backend:
    env_file: ../backend/.env
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: dev
    ports:
      - "55002:8000"
    networks:
      - internal
    volumes:
      - type: volume
        source: backend
        target: /usr/src/app
      - type: bind
        source: ../backend
        target: /usr/src/app
  database:
    env_file: ../database/.env
    build:
      context: ../database
      dockerfile: Dockerfile
    ports:
      - "3314:3306"
    networks:
      - internal
    volumes:
      - type: volume # ボリュームを作ることで、他コンテナとのデータ受け渡しができる
        source: database
        target: /var/lib/mysql
      - type: bind # DBデータを永続化する
        source: ../database/data
        target: /var/lib/mysql
      - type: bind # ボリューム作成時にDBの初期処理をする
        source: ../database/initialize
        target: /docker-entrypoint-initdb.d
  redis:
    build:
      context: ../redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    networks:
      - internal
    volumes:
      - type: volume # ボリュームを作ることで、他コンテナとのデータ受け渡しができる
        source: redis
        target: /data
      - type: bind # DBデータを永続化する
        source: ../redis/data
        target: /data
networks:
  external: # 外部と通信できるネットワーク
    driver: bridge
    internal: false
  internal: # コンテナ間通信に使い、外部には公開しないネットワーク
    driver: bridge
    internal: true
volumes:
  frontend:
  frontend-module:
  backend:
  database:
  redis:
